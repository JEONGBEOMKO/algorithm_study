1. 정렬(Sorting)이란?

- 정렬은 '특정한 기준에 따라서 데이터를 순서대로 나열하는 것'을 말한다. 흔히 우리가 알고있는 '오름차순', '내림차순'이 이에 해당된다.
- 정렬 알고리즘은 단순히 데이터를 정렬하는 것을 넘어 '이진탐색(Binary Search)'를 가능하게 하는 일명 전처리 단계와 같다.
- 정렬 알고리즘에는 많은 종류가 존재하지만, 코딩테스트에 많이 사용되는 선택정렬, 삽입정렬, 퀵 정렬, 계수정렬

2. 선택 정렬(Selection Sort)
2.1 선택 정렬의 원리

- 선택 정렬(Selection Sort)에서는 , 데이터가 무작위로 있을 때에 가장 작은 데이터를 선택해 맨 앞에 있는 데이터와 바꾸고, 그 작은 데이터를 선택해 앞으로 두번째 데이터와 바꾸는 과정을 반복.
  "늘 가장 작은 것을 선택한다"는 의미에서 선택 정렬(Selection Sort)알고리즘이라고 합니다.

2.2 선택 정렬 코드

array = [7, 5, 9, 0, 3, 1, 6, 2, 4, 8]

for i in range(len(array))
    min_index = i # 최소값의 인덱스 [7 : "array[min_index" , 5, 9, 0, 3, 1, 6, 2, 4, 8 : range(i+1, len(array))] 

    for j in range(i+1, len(array)):
        if array[min_index] > array[j]: 
            min_index = j 
    array[i], array[min_index] = array[min_index], array[i]

print(array)

#[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

2.3 시간복잡도
2.3.1 선택 정렬의 시간복잡도

- 선택정렬은 N-1 번 만큼 가장 작은 수를 찾아서 앞으로 보내야 하며, 매번 가장 작은 수를 찾기 위해서는 비교연산이 필요하다.
- 위의 코드와 같이 구현했을 경우, N + (N-1) + (N-2) + (N-3) + ... + 2 로 볼 수 있다.
=> 이를 근사하여 "N(N+1)/2 = (N²+N)/2"로 표현할 수 있는데, 이를 간단히 O(N²)로 표현

2.3.2 다른 정렬과 시간복잡도 비교

다른 정렬 이름            설명
버블 정렬               - 시간복잡도 Θ(n²)인 정렬 알고리즘 중에서 버블 정렬보다 선택 정렬이 항상 우수

삽입 정렬               - 삽입 정렬은 k번째 반복 이후, 첫번째 k요소가 정렬된 순서로 온다는 점에서 유사
                      - 하지만 선택 정렬은 k+1번째 요소를 찾기 위해 나머지 모든 요소들을 탐색하지만,
                      삽입 정렬은 k+1 번째 요소를 배치하는 데 필요한 만큼의 요소만 탐색하기 때문에 훨씬 효율적으로 실행된다


합병 정렬             - 선택 정렬은 합병 정렬과 같은 분할 정복 알고리즘을 사용하지만 일반적으로 큰 배열보다 작은 배열(요소 10~20개 미만)에서 더 빠름
                     - 충분히 작은 하위 목록에만 삽입 정렬 혹은 선택 정렬을 이용해서 최적화하는 것이 좋음