예제 입력 2번의 경우 사람의 수는 6명이므로 3:3으로 나누어 게임을 진행한다. 3명으로 이루어진 팀 중 한 팀의 구성원을 1번, 2번 3번 선택했을 때
팀의 능력치는 {1,2}, {1,3}, {2,1}, {2,3} , {3,1}, {3,2}의 합이 된다는 점이다.

또한 이 문제를 풀기 위해서 어떻게 풀어야 할지 고민하는 과정에서 DFS를 어떤 방식으로 수행해야 할지 고민이었는데, 처음 시도한 방법은 2중 반복문으로 한 명의 사람을 
고정 후 다음 사람을 선택하는 식으로 진행하려 했는데, 재귀 호출의 종료가 애매해져 실패했다.

- 해법

결국 생각해낸 방식은 n/2의 사람 수 만큼 방문 배열을 체크해주고 (예를 들어, 예제 입력 1의 경우 4명이므로 2명의 사람의 방문 배열을 표시 후 ) n/2의 사람 수 만큼
체크했을 때 체크된 사람들과 체크되지 않은 사람들의 능력치 합을 구하고자 했다. 그러나 이 방법의 경우에는 모든 경우의 수마다방문 배열을 탐색해야 해서 시간 초과가 발생했다.
결국 다른 분들의 블로그를 참고해서 계산을 하는 과정에서 방문 배열을 사용하는 것이 아니라 체크된 원소들을 별도의 배열에 저장 해 두면, 모든 방문 배열을 탐색할 필요가 없이
저장해 둔 배열만 탐색하면 되기 때문에 시간 단축이 가능했다.

또한 이 문제에서는 계산 과정과 재귀 호출의 반복문 부분에서 주의해야 할 부분이 있는데, 그것은 바로 조합의 개념이다. 능력치를 계산하는 과정에서는 예를 들어(1,2) 사람들의 능력치를 계산할 때
동시에 (2,1)의 능력치 역시 계산이 가능하기 때문에 이 부분에서 시간 단축이 가능하고, 또한 재귀호출의 반복문에서 1번 사람을 시작으로 1번, 2번, 3번의 사람이 선택된 후 다음 시작이 2번 사람일
때 2번, 1번, 3번을 선택하게 되면 앞선 계산과정과 동일하므로 배제해 주어야 할 필요가 있다. 

 